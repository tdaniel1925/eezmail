name: Deploy to Production

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Job 1: Validate code before deployment
  validate:
    runs-on: ubuntu-latest
    name: Validate Deployment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type check
        run: npm run type-check

      - name: Run linter
        run: npm run lint

      - name: Validate deployment readiness
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          MICROSOFT_CLIENT_ID: ${{ secrets.MICROSOFT_CLIENT_ID }}
          MICROSOFT_CLIENT_SECRET: ${{ secrets.MICROSOFT_CLIENT_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
        run: node validate-deployment.js

      - name: Run integration tests (if available)
        run: npm run test:integration || echo "No tests configured yet"
        continue-on-error: true

  # Job 2: Deploy to Vercel (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: validate # Only deploy if validation passes
    if: github.ref == 'refs/heads/main'
    name: Deploy to Production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Production
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Health check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30

          # Get the deployment URL from Vercel
          DEPLOY_URL=$(vercel ls --token=${{ secrets.VERCEL_TOKEN }} | grep "Production" | head -1 | awk '{print $2}')

          # Try production URL first, fall back to deployment URL
          if [ ! -z "${{ secrets.NEXT_PUBLIC_APP_URL }}" ]; then
            HEALTH_URL="${{ secrets.NEXT_PUBLIC_APP_URL }}/api/health/detailed"
          else
            HEALTH_URL="https://${DEPLOY_URL}/api/health/detailed"
          fi

          echo "Checking health at: $HEALTH_URL"

          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_URL")

          if [ $RESPONSE -eq 200 ]; then
            echo "✅ Deployment successful - health check passed"
            curl -s "$HEALTH_URL" | head -20
          else
            echo "❌ Deployment failed - health check returned $RESPONSE"
            exit 1
          fi

  # Job 3: Notify on failure
  notify-failure:
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: failure()
    name: Notify Deployment Failure

    steps:
      - name: Send notification
        run: |
          echo "❌ Deployment failed!"
          echo "Check the Actions tab for details"
          # Add Slack/Discord webhook here if desired
